require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');

// ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
const connectDB = require('./config/database');

// Routes
const apartmentRoutes = require('./routes/apartments');
const authRoutes = require('./routes/auth');
const projectRoutes = require('./routes/project');
const mediaRoutes = require('./routes/media');
const adminRoutes = require('./routes/admin');
const inquiryRoutes = require('./routes/inquiries');
const publicRoutes = require('./routes/public');
const projectInfoRoutes = require('./routes/projectInfo');
const usersRoutes = require('./routes/users');
const settingsRoutes = require('./routes/settings');
const locationFeaturesRoutes = require('./routes/locationFeatures');

const app = express();

// ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
connectDB();

// Security middleware
app.use(helmet({
  crossOriginResourcePolicy: { policy: "cross-origin" }
}));

// Disable caching for development to prevent 304 issues
app.use((req, res, next) => {
  res.set({
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    'Pragma': 'no-cache',
    'Expires': '0'
  });
  next();
});

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 ุฏูููุฉ
  max: 100, // ุญุฏ ุฃูุตู 100 ุทูุจ ููู IP
  message: {
    success: false,
    message: 'ุชู ุชุฌุงูุฒ ุงูุญุฏ ุงูุฃูุตู ููุทูุจุงุชุ ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// Rate limiting ุฎุงุต ูู login (ุฃูุซุฑ ุชุณุงููุงู ููุชุทููุฑ)
const loginLimiter = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 ุฏูุงุฆู
  max: 20, // ุญุฏ ุฃูุตู 20 ูุญุงููุฉ ุฏุฎูู
  message: {
    success: false,
    message: 'ุชู ุชุฌุงูุฒ ุงูุญุฏ ุงูุฃูุตู ููุญุงููุงุช ุชุณุฌูู ุงูุฏุฎููุ ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู'
  },
  skipSuccessfulRequests: true
});

app.use('/api/auth/login', loginLimiter);
app.use('/api/', limiter);

// CORS - ูุณูุญ ุจุฌููุน ุงููุณุงุฑุงุช ูุงูููุงุท
app.use(cors({
  origin: '*', // ูุณูุญ ุจุฌููุน ุงููุณุงุฑุงุช ูุงูููุงุท
  credentials: false, // ูุฌุจ ุฃู ูููู false ูุน origin: '*'
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin']
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Compression
app.use(compression());

// Logging
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
} else {
  app.use(morgan('combined'));
}

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'ุงูุฎุงุฏู ูุนูู ุจุดูู ุทุจูุนู',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV
  });
});

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/apartments', apartmentRoutes);
app.use('/api/project', projectRoutes);
app.use('/api/media', mediaRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/inquiries', inquiryRoutes);
app.use('/api/project-info', projectInfoRoutes);
app.use('/api/users', usersRoutes);
app.use('/api/settings', settingsRoutes);
app.use('/api/location-features', locationFeaturesRoutes);

// Public API Routes (ุจุฏูู prefix ุฅุถุงูู)
app.use('/api', publicRoutes);

// Default route
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'ูุฑุญุจุงู ุจู ูู API ููุญุฉ ุชุญูู ูุดุฑูุน 24 - ุญู ุงูุฒูุฑุงุก',
    version: '1.0.0',
    documentation: '/api/docs'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'ุงููุณุงุฑ ุบูุฑ ููุฌูุฏ'
  });
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('Error:', error);

  // Multer errors
  if (error.code === 'LIMIT_FILE_SIZE') {
    return res.status(400).json({
      success: false,
      message: 'ุญุฌู ุงูููู ูุจูุฑ ุฌุฏุงู'
    });
  }

  // Mongoose validation errors
  if (error.name === 'ValidationError') {
    const errors = Object.values(error.errors).map(err => err.message);
    return res.status(400).json({
      success: false,
      message: 'ุจูุงูุงุช ุบูุฑ ุตุญูุญุฉ',
      errors
    });
  }

  // Mongoose duplicate key error
  if (error.code === 11000) {
    const field = Object.keys(error.keyPattern)[0];
    return res.status(400).json({
      success: false,
      message: `${field} ููุฌูุฏ ูุณุจูุงู`
    });
  }

  // JWT errors
  if (error.name === 'JsonWebTokenError') {
    return res.status(401).json({
      success: false,
      message: 'ุงูุชููู ุบูุฑ ุตุงูุญ'
    });
  }

  if (error.name === 'TokenExpiredError') {
    return res.status(401).json({
      success: false,
      message: 'ุงูุชููู ููุชูู ุงูุตูุงุญูุฉ'
    });
  }

  // Default error
  res.status(error.status || 500).json({
    success: false,
    message: error.message || 'ุฎุทุฃ ูู ุงูุฎุงุฏู',
    ...(process.env.NODE_ENV === 'development' && { stack: error.stack })
  });
});

// Server
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`
โญโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโฎ
โ                                                 โ
โ  ๐ข ูุดุฑูุน 24 - ููุญุฉ ุงูุชุญูู API                 โ
โ                                                 โ
โ  ๐ ุงูุฎุงุฏู ูุนูู ุนูู ุงูุจูุฑุช: ${PORT}               โ
โ  ๐ ุงูุจูุฆุฉ: ${process.env.NODE_ENV}              โ
โ  ๐ฑ ุงูุตุญุฉ: http://localhost:${PORT}/health      โ
โ                                                 โ
โฐโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโฏ
  `);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('๐ค ุฅููุงู ุงูุฎุงุฏู...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('๐ค ุฅููุงู ุงูุฎุงุฏู...');
  process.exit(0);
});

module.exports = app;
